{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Topics File system Data Format Dub","title":"Home"},{"location":"#topics","text":"File system Data Format Dub","title":"Topics"},{"location":"tags/","text":"Tags data_format dub file_system json windows zip","title":"By tags"},{"location":"tags/#tags","text":"data_format dub file_system json windows zip","title":"Tags"},{"location":"topics/","text":"Topics File system Data Format Dub","title":"Overview"},{"location":"topics/#topics","text":"File system Data Format Dub","title":"Topics"},{"location":"data_format/","text":"Data Format Create empty json object","title":"Data Format"},{"location":"data_format/#data-format","text":"Create empty json object","title":"Data Format"},{"location":"data_format/create_empy_json_object/","text":"Create empty json object JSONValue jsObject = JSONValue ( string [ string ]. init ); Tags: data_format , json","title":"Create empty json object"},{"location":"data_format/create_empy_json_object/#create-empty-json-object","text":"JSONValue jsObject = JSONValue ( string [ string ]. init ); Tags: data_format , json","title":"Create empty json object"},{"location":"dub/","text":"Dub Dub application template","title":"Dub"},{"location":"dub/#dub","text":"Dub application template","title":"Dub"},{"location":"dub/application_template/","text":"Dub application template File structure sample \u251c\u2500\u2500 dub.json \u2514\u2500\u2500 source \u2514\u2500\u2500 my \u251c\u2500\u2500 app.d \u2514\u2500\u2500 test \u2514\u2500\u2500 testapp.d dub.json { \"authors\" : [ \"Developer\" ], \"copyright\" : \"Copyright \u00a9 2021, Developer\" , \"description\" : \"A minimal D application.\" , \"license\" : \"proprietary\" , \"name\" : \"sample\" , \"configurations\" : [{ \"name\" : \"debug\" , \"targetType\" : \"executable\" , \"excludedSourceFiles\" : [ \"source/my/test/\" ] }, { \"name\" : \"unittest\" , \"targetType\" : \"executable\" , \"mainSourceFile\" : \"source/my/test/testapp.d\" , \"excludedSourceFiles\" : [ \"source/my/app.d\" ], \"dependencies\" : { \"d-unit\" : \"~>0.10.1\" } }] } source/my/app.d module my . app ; void main () { } source/my/test/testapp.d module my . test . testapp ; import dunit ; mixin Main ; class Test { mixin UnitTest ; @Test public void assertEqualsFailure () { string expected = \"bar\" ; string actual = \"baz\" ; assertEquals ( expected , actual ); } } Tags: dub","title":"Dub application template"},{"location":"dub/application_template/#dub-application-template","text":"","title":"Dub application template"},{"location":"dub/application_template/#file-structure","text":"sample \u251c\u2500\u2500 dub.json \u2514\u2500\u2500 source \u2514\u2500\u2500 my \u251c\u2500\u2500 app.d \u2514\u2500\u2500 test \u2514\u2500\u2500 testapp.d","title":"File structure"},{"location":"dub/application_template/#dubjson","text":"{ \"authors\" : [ \"Developer\" ], \"copyright\" : \"Copyright \u00a9 2021, Developer\" , \"description\" : \"A minimal D application.\" , \"license\" : \"proprietary\" , \"name\" : \"sample\" , \"configurations\" : [{ \"name\" : \"debug\" , \"targetType\" : \"executable\" , \"excludedSourceFiles\" : [ \"source/my/test/\" ] }, { \"name\" : \"unittest\" , \"targetType\" : \"executable\" , \"mainSourceFile\" : \"source/my/test/testapp.d\" , \"excludedSourceFiles\" : [ \"source/my/app.d\" ], \"dependencies\" : { \"d-unit\" : \"~>0.10.1\" } }] }","title":"dub.json"},{"location":"dub/application_template/#sourcemyappd","text":"module my . app ; void main () { }","title":"source/my/app.d"},{"location":"dub/application_template/#sourcemytesttestappd","text":"module my . test . testapp ; import dunit ; mixin Main ; class Test { mixin UnitTest ; @Test public void assertEqualsFailure () { string expected = \"bar\" ; string actual = \"baz\" ; assertEquals ( expected , actual ); } } Tags: dub","title":"source/my/test/testapp.d"},{"location":"file_system/","text":"File system List windows system drives Extract zip archive Copy folder recursive","title":"File system"},{"location":"file_system/#file-system","text":"List windows system drives Extract zip archive Copy folder recursive","title":"File system"},{"location":"file_system/copy_folder_recursive/","text":"Copy folder recursive void copyRecurse ( string from , string to ) { import std . file : copy , dirEntries , isDir , isFile , mkdirRecurse , SpanMode ; import std . path : buildNormalizedPath , buildPath ; from = buildNormalizedPath ( from ); to = buildNormalizedPath ( to ); if ( isDir ( from )) { mkdirRecurse ( to ); auto entries = dirEntries ( from , SpanMode . breadth ); foreach ( entry ; entries ) { auto dst = buildPath ( to , entry . name [ from . length + 1 .. $]); // + 1 for the directory separator if ( isFile ( entry . name )) copy ( entry . name , dst ); else mkdirRecurse ( dst ); } } else copy ( from , to ); } Tags: file_system","title":"Copy folder recursive"},{"location":"file_system/copy_folder_recursive/#copy-folder-recursive","text":"void copyRecurse ( string from , string to ) { import std . file : copy , dirEntries , isDir , isFile , mkdirRecurse , SpanMode ; import std . path : buildNormalizedPath , buildPath ; from = buildNormalizedPath ( from ); to = buildNormalizedPath ( to ); if ( isDir ( from )) { mkdirRecurse ( to ); auto entries = dirEntries ( from , SpanMode . breadth ); foreach ( entry ; entries ) { auto dst = buildPath ( to , entry . name [ from . length + 1 .. $]); // + 1 for the directory separator if ( isFile ( entry . name )) copy ( entry . name , dst ); else mkdirRecurse ( dst ); } } else copy ( from , to ); } Tags: file_system","title":"Copy folder recursive"},{"location":"file_system/extract_zip_archive/","text":"Extract zip archive void extractArchive ( string archivePath , string destinationPath ) { import std . path , std . zip , std . file , std . stdio , std . string ; ZipArchive archive = new ZipArchive ( read ( archivePath )); foreach ( name , am ; archive . directory ) { string destination = buildNormalizedPath ( destinationPath , name ); if (! destination . dirName . exists ) mkdirRecurse ( destination . dirName ); if (! name . endsWith ( \"/\" )) { archive . expand ( am ); am . expandedData . toFile ( destination ); } } } Tags: file_system , zip","title":"Extract zip archive"},{"location":"file_system/extract_zip_archive/#extract-zip-archive","text":"void extractArchive ( string archivePath , string destinationPath ) { import std . path , std . zip , std . file , std . stdio , std . string ; ZipArchive archive = new ZipArchive ( read ( archivePath )); foreach ( name , am ; archive . directory ) { string destination = buildNormalizedPath ( destinationPath , name ); if (! destination . dirName . exists ) mkdirRecurse ( destination . dirName ); if (! name . endsWith ( \"/\" )) { archive . expand ( am ); am . expandedData . toFile ( destination ); } } } Tags: file_system , zip","title":"Extract zip archive"},{"location":"file_system/list_windows_system_drives/","text":"List windows system drives import std . stdio , std . string ; alias std . string . toStringz CSTR ; import core . sys . windows . windows ; extern ( Windows ) { DWORD GetLogicalDrives (); UINT GetDriveTypeA ( LPCSTR lpRootPathName ); UINT GetDriveTypeW ( LPCWSTR lpRootPathName ); //The drive type cannot be determined. const UINT DRIVE_UNKNOWN = 0 ; //The root path is invalid; for example, there is no volume is mounted at the path. const UINT DRIVE_NO_ROOT_DIR = 1 ; //The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader. const UINT DRIVE_REMOVABLE = 2 ; //The drive has fixed media; for example, a hard drive or flash drive. const UINT DRIVE_FIXED = 3 ; //The drive is a remote (network) drive. const UINT DRIVE_REMOTE = 4 ; //The drive is a CD-ROM drive. const UINT DRIVE_CDROM = 5 ; //The drive is a RAM disk. const UINT DRIVE_RAMDISK = 6 ; } char [][] LocalDrives () { DWORD mask = GetLogicalDrives (); char [] drive = new char [ 3 ]; char [][] list ; drive [ 1..3 ] = \":\\\\\" ; for ( int i = 0 ; i < 26 ; i ++) { if ( mask & 0x1 << i ) { drive [ 0 ] = cast ( char )( 'A' + cast ( char ) i ); list ~= drive . dup ; } } return list ; } template SortDrive ( UINT TYPE ) { char [][] SortDrive () { char [][] list ; foreach ( drive ; LocalDrives ()) { switch ( GetDriveTypeA ( CSTR ( drive ))) { case TYPE : list ~= drive ; break ; default : break ; } } return list ; }} alias SortDrive !( DRIVE_FIXED ) FixedDrives ; alias SortDrive !( DRIVE_REMOVABLE ) RemovableDrives ; alias SortDrive !( DRIVE_REMOTE ) RemoteDrives ; alias SortDrive !( DRIVE_CDROM ) CdDrives ; alias SortDrive !( DRIVE_RAMDISK ) RamDisks ; void main () { writeln ( \"Fixed : \" , FixedDrives ()); writeln ( \"Removable: \" , RemovableDrives ()); writeln ( \"Remote : \" , RemoteDrives ()); writeln ( \"Cd : \" , CdDrives ()); writeln ( \"Ramdisk : \" , RamDisks ()); } Tags: file_system , windows","title":"List windows system drives"},{"location":"file_system/list_windows_system_drives/#list-windows-system-drives","text":"import std . stdio , std . string ; alias std . string . toStringz CSTR ; import core . sys . windows . windows ; extern ( Windows ) { DWORD GetLogicalDrives (); UINT GetDriveTypeA ( LPCSTR lpRootPathName ); UINT GetDriveTypeW ( LPCWSTR lpRootPathName ); //The drive type cannot be determined. const UINT DRIVE_UNKNOWN = 0 ; //The root path is invalid; for example, there is no volume is mounted at the path. const UINT DRIVE_NO_ROOT_DIR = 1 ; //The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader. const UINT DRIVE_REMOVABLE = 2 ; //The drive has fixed media; for example, a hard drive or flash drive. const UINT DRIVE_FIXED = 3 ; //The drive is a remote (network) drive. const UINT DRIVE_REMOTE = 4 ; //The drive is a CD-ROM drive. const UINT DRIVE_CDROM = 5 ; //The drive is a RAM disk. const UINT DRIVE_RAMDISK = 6 ; } char [][] LocalDrives () { DWORD mask = GetLogicalDrives (); char [] drive = new char [ 3 ]; char [][] list ; drive [ 1..3 ] = \":\\\\\" ; for ( int i = 0 ; i < 26 ; i ++) { if ( mask & 0x1 << i ) { drive [ 0 ] = cast ( char )( 'A' + cast ( char ) i ); list ~= drive . dup ; } } return list ; } template SortDrive ( UINT TYPE ) { char [][] SortDrive () { char [][] list ; foreach ( drive ; LocalDrives ()) { switch ( GetDriveTypeA ( CSTR ( drive ))) { case TYPE : list ~= drive ; break ; default : break ; } } return list ; }} alias SortDrive !( DRIVE_FIXED ) FixedDrives ; alias SortDrive !( DRIVE_REMOVABLE ) RemovableDrives ; alias SortDrive !( DRIVE_REMOTE ) RemoteDrives ; alias SortDrive !( DRIVE_CDROM ) CdDrives ; alias SortDrive !( DRIVE_RAMDISK ) RamDisks ; void main () { writeln ( \"Fixed : \" , FixedDrives ()); writeln ( \"Removable: \" , RemovableDrives ()); writeln ( \"Remote : \" , RemoteDrives ()); writeln ( \"Cd : \" , CdDrives ()); writeln ( \"Ramdisk : \" , RamDisks ()); } Tags: file_system , windows","title":"List windows system drives"},{"location":"tags/data_format/","text":"Tags: data_format Create empty json object Related tags: json","title":"Tags: data_format"},{"location":"tags/data_format/#tags-data_format","text":"Create empty json object Related tags: json","title":"Tags: data_format"},{"location":"tags/data_format__json/","text":"Tags: data_format, json Create empty json object Related tags:","title":"Tags: data_format, json"},{"location":"tags/data_format__json/#tags-data_format-json","text":"Create empty json object Related tags:","title":"Tags: data_format, json"},{"location":"tags/dub/","text":"Tags: dub Dub application template Related tags:","title":"Tags: dub"},{"location":"tags/dub/#tags-dub","text":"Dub application template Related tags:","title":"Tags: dub"},{"location":"tags/file_system/","text":"Tags: file_system List windows system drives Extract zip archive Copy folder recursive Related tags: windows zip","title":"Tags: file_system"},{"location":"tags/file_system/#tags-file_system","text":"List windows system drives Extract zip archive Copy folder recursive Related tags: windows zip","title":"Tags: file_system"},{"location":"tags/file_system__windows/","text":"Tags: file_system, windows List windows system drives Related tags:","title":"Tags: file_system, windows"},{"location":"tags/file_system__windows/#tags-file_system-windows","text":"List windows system drives Related tags:","title":"Tags: file_system, windows"},{"location":"tags/file_system__zip/","text":"Tags: file_system, zip Extract zip archive Related tags:","title":"Tags: file_system, zip"},{"location":"tags/file_system__zip/#tags-file_system-zip","text":"Extract zip archive Related tags:","title":"Tags: file_system, zip"},{"location":"tags/json/","text":"Tags: json Create empty json object Related tags: data_format","title":"Tags: json"},{"location":"tags/json/#tags-json","text":"Create empty json object Related tags: data_format","title":"Tags: json"},{"location":"tags/windows/","text":"Tags: windows List windows system drives Related tags: file_system","title":"Tags: windows"},{"location":"tags/windows/#tags-windows","text":"List windows system drives Related tags: file_system","title":"Tags: windows"},{"location":"tags/zip/","text":"Tags: zip Extract zip archive Related tags: file_system","title":"Tags: zip"},{"location":"tags/zip/#tags-zip","text":"Extract zip archive Related tags: file_system","title":"Tags: zip"}]}